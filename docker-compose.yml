version: "3.7"

services:

  proxy:
    image: traefik:v2.6.6
    container_name: ${PLATFORM_STACK_NAME}-traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8090:8080"
    volumes:
      - ./letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker=true
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      # Redirect Http to Https
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
      # Enable the Dashboard and API in insecure mode for local development
      - --api.insecure=true
      # - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      - --certificatesresolvers.letsencrypt.acme.email=apps@interlink-project.eu
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json

      # httpchallenge
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.letsencrypt.acme.httpchallenge=true

      # staging
      # - --certificatesResolvers.letsencrypt.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory

    labels:
      - traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)
      - traefik.http.routers.http-catchall.entrypoints=web
      - traefik.http.routers.http-catchall.middlewares=redirect-to-https
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https

      # - traefik.http.middlewares.iframeHeaders.headers.customresponseheaders.Content-Security-Policy=frame-ancestors 'self' ${DOMAIN} *.${MAIN_DOMAIN}
      # - traefik.http.middlewares.iframeHeaders.headers.customresponseheaders.X-Frame-Options=ALLOW-FROM https://${MAIN_DOMAIN}
      # - traefik.http.middlewares.iframeHeaders.headers.customresponseheaders.Access-Control-Allow-Origin=*
      # - traefik.http.middlewares.iframeHeaders.headers.customresponseheaders.Access-Control-Allow-Methods=DELETE, POST, PUT, GET, OPTIONS
      # - traefik.http.middlewares.iframeHeaders.headers.customresponseheaders.Access-Control-Allow-Headers=Content-Type, Authorization, X-Requested-With
    networks:
      - traefik-public

    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  portainer:
    image: portainer/portainer-ce:2.11.1-alpine
    container_name: ${PLATFORM_STACK_NAME}-portainer
    restart: unless-stopped
    ports:
      - "9000:9000"
    security_opt:
      - no-new-privileges:true
    networks:
      - traefik-public
    environment:
      - TZ=${TZ}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - portainer-data:/data
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.routers.${PLATFORM_STACK_NAME}-portainer.entrypoints=websecure
      - traefik.http.routers.${PLATFORM_STACK_NAME}-portainer.tls.certresolver=letsencrypt
      - traefik.http.routers.${PLATFORM_STACK_NAME}-portainer.tls=true
      - traefik.http.routers.${PLATFORM_STACK_NAME}-portainer.rule=Host(`portainer.${DOMAIN}`)
      - traefik.http.services.${PLATFORM_STACK_NAME}-portainer.loadbalancer.server.port=9000
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  grafana:
    image: grafanadev
    container_name: ${PLATFORM_STACK_NAME}-grafana
    restart: unless-stopped
    build:
      context: ./grafana/
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      # Grafana
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USERNAME}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
    links:
      - prometheus:prometheus
    volumes:
      - grafana-dashboards:/var/lib/grafana
      - grafana-data:/etc/grafana/
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.routers.${PLATFORM_STACK_NAME}-grafana.rule=Host(`${DOMAIN}`) && PathPrefix(`/monitoring`)
      - traefik.http.routers.${PLATFORM_STACK_NAME}-grafana.service=${PLATFORM_STACK_NAME}-grafana
      - traefik.http.services.${PLATFORM_STACK_NAME}-grafana.loadbalancer.server.port=3000
      - traefik.http.routers.${PLATFORM_STACK_NAME}-grafana.entrypoints=websecure
      - traefik.http.routers.${PLATFORM_STACK_NAME}-grafana.tls.certresolver=letsencrypt
      - traefik.http.routers.${PLATFORM_STACK_NAME}-grafana.tls=true
      - traefik.http.routers.${PLATFORM_STACK_NAME}-grafana.middlewares=${PLATFORM_STACK_NAME}-grafana-stripprefix
      - traefik.http.middlewares.${PLATFORM_STACK_NAME}-grafana-stripprefix.stripprefix.prefixes=/monitoring
    networks:
      - traefik-public
      - grafana-network
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"


  mysql:
    image: mysqldev
    container_name: ${PLATFORM_STACK_NAME}-mysql
    restart: unless-stopped
    build:
      context: ./mysql/.
      dockerfile: Dockerfile
    volumes:
      - mysql-data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    networks:
      - grafana-network
      - traefik-public
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  prometheus:
    image: prometheusdev
    container_name: ${PLATFORM_STACK_NAME}-prometheus
    restart: unless-stopped
    build:
      context: ./prometheus/.
      dockerfile: Dockerfile
    volumes:
      - prometheus-data:/prometheus
    expose:
      - 9090
    ports:
      - "9090:9090"
    links:
      - cadvisor:cadvisor
      - node-exporter:node-exporter
    networks:
      - grafana-network
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  cadvisor:
    image: google/cadvisor:v0.33.0
    container_name: ${PLATFORM_STACK_NAME}-monitoring_cadvisor
    restart: unless-stopped
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /datadrive/docker/containers/:/datadrive/docker/containers/:ro
    expose:
      - 8080
    networks:
      - grafana-network
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"


  node-exporter:
    image: prom/node-exporter:v1.3.1
    container_name: ${PLATFORM_STACK_NAME}-monitoring_node_exporter
    restart: unless-stopped
    expose:
      - 9100
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - grafana-network
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  promtail:
    image: promtaildev
    container_name: ${PLATFORM_STACK_NAME}-promtail
    build:
      context: ./promtail/.
      dockerfile: Dockerfile
    restart: unless-stopped
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - /var/log:/var/log
      - /var/lib/docker/containers/:/var/lib/docker/containers/:ro
      - /datadrive/docker/containers/:/datadrive/docker/containers/:ro
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - grafana-network
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

  filebeat:
    image: filebeatdev
    container_name: ${PLATFORM_STACK_NAME}-filebeat
    build:
      context: ./filebeat/.
      dockerfile: Dockerfile
    user: root
    volumes:
      - type: bind
        source: /datadrive/docker/containers
        target: /var/lib/docker/containers
        read_only: true
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
    command:
      # Log to stderr.
      - -e
      # Disable config file permissions checks. Allows mounting
      # 'config/filebeat.yml' even if it's not owned by root.
      # see: https://www.elastic.co/guide/en/beats/libbeat/current/config-file-permissions.html
      - --strict.perms=false
    networks:
      - grafana-network
      - traefik-public

  grafanaelasticsearch:
    image: elasticsearch:8.2.2
    container_name: ${PLATFORM_STACK_NAME}-grafana-elasticsearch
    restart: unless-stopped
    environment:
      - xpack.security.enabled=true
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms750m -Xmx750m
      - ELASTIC_USERNAME
      - ELASTIC_PASSWORD
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    networks:
      - grafana-network
      - traefik-public
    volumes:
      - grafanaelasticsearchelasticsearch-data:/usr/share/elasticsearch/data
      - grafanaelasticsearchelasticsearch-config:/usr/share/elasticsearch/config
    logging:
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"

volumes:
  grafana-dashboards:
  grafana-data:
  mysql-data:
  prometheus-data:
  grafanaelasticsearchelasticsearch-data:
  grafanaelasticsearchelasticsearch-config:

  portainer-data:


networks:
  traefik-public:
    external: true
  grafana-network:
    external: true